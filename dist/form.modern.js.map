{"version":3,"file":"form.modern.js","sources":["../src/form.js"],"sourcesContent":["/**\n   * createElement is a convenience wrapper around document.createElement. Since we\n   * use createElement all over the place, this allows for (slightly) smaller code\n   * as well as abstracting away issues with creating elements in contexts other than\n   * HTML documents (e.g. SVG documents).\n   *\n   * @returns {HTMLElement|SVGElement} An HTML or SVG element\n   */\nfunction createElement() {\n    const isSVG = document.documentElement.nodeName.toLowerCase() === 'svg';\n\n    if (typeof document.createElement !== 'function') {\n        // This is the case in IE7, where the type of createElement is \"object\".\n        // For this reason, we cannot call apply() as Object is not a Function.\n        return document.createElement(arguments[0]);\n    } else if (isSVG) {\n        return document.createElementNS.call(document, 'http://www.w3.org/2000/svg', arguments[0]);\n    } else {\n        return document.createElement.apply(document, arguments);\n    }\n}\n\nconst hasFormAttribute = () => {\n    var form = createElement('form');\n    var input = createElement('input');\n    var div = createElement('div');\n    var id = 'formtest' + (new Date()).getTime();\n    var attr;\n    var bool = false;\n\n    form.id = id;\n\n    // IE6/7 confuses the form idl attribute and the form content attribute, so we use document.createAttribute\n    try {\n        input.setAttribute('form', id);\n    } catch (e) {\n        if (document.createAttribute) {\n            attr = document.createAttribute('form');\n            attr.nodeValue = id;\n            input.setAttributeNode(attr);\n        }\n    }\n\n    div.appendChild(form);\n    div.appendChild(input);\n\n    document.documentElement.appendChild(div);\n\n    bool = form.elements && form.elements.length === 1 && input.form === form;\n\n    div.parentNode.removeChild(div);\n\n    return bool;\n};\n\n/**\n * Way2Web Form helpers.\n */\nclass W2Form {\n    /**\n     * Constructor.\n     *\n     * @param {object} keyOptions\n     */\n    constructor(keyOptions) {\n        this.version = '1.0.0';\n\n        this.defaultKeys = {\n            's':      'button.btn-primary[type=submit]',\n            'a':      'a.btn-default',\n            'Delete': 'button.btn-danger[type=submit]'\n        };\n        this.keys = {};\n        this.keyOptions = keyOptions;\n        this.lastKey = null;\n\n        this.modern = hasFormAttribute();\n    }\n\n\n    /**\n     * Helper functions for forms.\n     *\n     * @param {object} element\n     *\n     * @return {object}\n     */\n    init(element) {\n        this.keys = Object.assign({}, this.defaultKeys, this.keyOptions || {});\n        element.addEventListener('keydown', this.keyPress.bind(this), false);\n\n        if (!this.modern) {\n            element.querySelector('button[type=submit][form]').addEventListener(\n                'click',\n                this.submit.bind(this),\n                false\n            );\n            element.querySelector('form input.form-control').addEventListener(\n                'keydown',\n                this.submitOnEnter.bind(this),\n                false\n            );\n        }\n\n        return this;\n    }\n\n    /**\n     * Set the modern variable, to simulate modern check.\n     *\n     * @param {boolean} customValue\n     *\n     * @return {object}\n     */\n    setModern(customValue) {\n        this.modern = customValue;\n\n        return this;\n    }\n\n    /**\n     * Get the modern variable.\n     *\n     * @return {boolean}\n     */\n    getModern() {\n        return this.modern;\n    }\n\n    /**\n     * Trigger the form when you click on the enter button.\n     *\n     * @param {object} event\n     */\n    submitOnEnter(event) {\n        if (event.key == 'Enter') {\n            event.target.closest('form').submit();\n        }\n    }\n\n    /**\n     * Trigger the form when you click on a button with the form attribute.\n     * The attribute form contains the id of the form.\n     *\n     * @param {object} event\n     */\n    submit(event) {\n        let button = event.target;\n        let buttonName = button.attr('name');\n        let buttonValue = button.val();\n        let formId = button.attr('form');\n        let form;\n\n        if (event) {\n            event.preventDefault();\n        }\n\n        if (!formId) {\n            return;\n        }\n\n        form = document.getElementById(formId);\n        if (buttonName && buttonValue) {\n            form.append('<input type=\"hidden\" name=\"' + buttonName + '\" value=\"' + buttonValue + '\">');\n        }\n\n        if (form.length > 0) {\n            form.submit();\n        }\n    }\n\n    /**\n     * Check if you press a key combination if there is a element to click.\n     *\n     * @param {object} event\n     */\n    keyPress(event) {\n        let key = this.keys[event.key];\n\n        this.lastKey = event.key;\n\n        if (event.ctrlKey && key && event.target.tagName != 'INPUT' && event.target.tagName != 'TEXTAREA') {\n            event.preventDefault();\n            this.click(key);\n        }\n    }\n\n    /**\n     * Click on an element.\n     *\n     * @param {string} key\n     */\n    click(key) {\n        if (document.querySelectorAll(key).length > 0) {\n            document.querySelector(key).click();\n        }\n    }\n}\n\nif (typeof window === 'object') {\n    window.W2Form = W2Form;\n}\n\nif (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = W2Form;\n}\n"],"names":["createElement","isSVG","document","documentElement","nodeName","toLowerCase","arguments","createElementNS","call","apply","W2Form","constructor","keyOptions","this","version","defaultKeys","s","a","Delete","keys","lastKey","modern","attr","bool","form","input","div","id","Date","getTime","setAttribute","e","createAttribute","nodeValue","setAttributeNode","appendChild","elements","length","parentNode","removeChild","hasFormAttribute","init","element","Object","assign","addEventListener","keyPress","bind","querySelector","submit","submitOnEnter","setModern","customValue","getModern","event","key","target","closest","button","buttonName","buttonValue","val","formId","preventDefault","getElementById","append","ctrlKey","tagName","click","querySelectorAll","window","module","exports"],"mappings":"AAQA,SAASA,IACL,MAAMC,EAA4D,QAApDC,SAASC,gBAAgBC,SAASC,cAEhD,MAAsC,mBAA3BH,SAASF,cAGTE,SAASF,cAAcM,UAAU,IACjCL,EACAC,SAASK,gBAAgBC,KAAKN,SAAU,6BAA8BI,UAAU,IAEhFJ,SAASF,cAAcS,MAAMP,SAAUI,WAwCtD,MAAMI,EAMFC,YAAYC,GACRC,KAAKC,QAAU,QAEfD,KAAKE,YAAc,CACfC,EAAU,kCACVC,EAAU,gBACVC,OAAU,kCAEdL,KAAKM,KAAO,GACZN,KAAKD,WAAaA,EAClBC,KAAKO,QAAU,KAEfP,KAAKQ,OAtDY,MACrB,IAIIC,EACAC,EALAC,EAAOxB,EAAc,QACrByB,EAAQzB,EAAc,SACtB0B,EAAM1B,EAAc,OACpB2B,EAAK,YAAc,IAAIC,MAAQC,UAInCL,EAAKG,GAAKA,EAGV,IACIF,EAAMK,aAAa,OAAQH,GAC7B,MAAOI,GACD7B,SAAS8B,mBACTV,EAAOpB,SAAS8B,gBAAgB,SAC3BC,UAAYN,EACjBF,EAAMS,iBAAiBZ,IAa/B,OATAI,EAAIS,YAAYX,GAChBE,EAAIS,YAAYV,GAEhBvB,SAASC,gBAAgBgC,YAAYT,GAErCH,EAAOC,EAAKY,UAAqC,IAAzBZ,EAAKY,SAASC,QAAgBZ,EAAMD,OAASA,EAErEE,EAAIY,WAAWC,YAAYb,GAEpBH,GAwBWiB,GAWlBC,KAAKC,GAiBD,OAhBA7B,KAAKM,KAAOwB,OAAOC,OAAO,GAAI/B,KAAKE,YAAaF,KAAKD,YAAc,IACnE8B,EAAQG,iBAAiB,UAAWhC,KAAKiC,SAASC,KAAKlC,OAAO,GAEzDA,KAAKQ,SACNqB,EAAQM,cAAc,6BAA6BH,iBAC/C,QACAhC,KAAKoC,OAAOF,KAAKlC,OACjB,GAEJ6B,EAAQM,cAAc,2BAA2BH,iBAC7C,UACAhC,KAAKqC,cAAcH,KAAKlC,OACxB,SAcZsC,UAAUC,GAGN,OAFAvC,KAAKQ,OAAS+B,OAUlBC,YACI,YAAYhC,OAQhB6B,cAAcI,GACO,SAAbA,EAAMC,KACND,EAAME,OAAOC,QAAQ,QAAQR,SAUrCA,OAAOK,GACH,IAII9B,EAJAkC,EAASJ,EAAME,OACfG,EAAaD,EAAOpC,KAAK,QACzBsC,EAAcF,EAAOG,MACrBC,EAASJ,EAAOpC,KAAK,QAGrBgC,GACAA,EAAMS,iBAGLD,IAILtC,EAAOtB,SAAS8D,eAAeF,GAC3BH,GAAcC,GACdpC,EAAKyC,OAAO,8BAAgCN,EAAa,YAAcC,EAAc,MAGrFpC,EAAKa,OAAS,GACdb,EAAKyB,UASbH,SAASQ,GACL,IAAIC,EAAM1C,KAAKM,KAAKmC,EAAMC,KAE1B1C,KAAKO,QAAUkC,EAAMC,IAEjBD,EAAMY,SAAWX,GAA+B,SAAxBD,EAAME,OAAOW,SAA8C,YAAxBb,EAAME,OAAOW,UACxEb,EAAMS,iBACNlD,KAAKuD,MAAMb,IASnBa,MAAMb,GACErD,SAASmE,iBAAiBd,GAAKlB,OAAS,GACxCnC,SAAS8C,cAAcO,GAAKa,SAKlB,iBAAXE,SACPA,OAAO5D,OAASA,GAGE,iBAAX6D,QAAiD,iBAAnBA,OAAOC,UAC5CD,OAAOC,QAAU9D"}